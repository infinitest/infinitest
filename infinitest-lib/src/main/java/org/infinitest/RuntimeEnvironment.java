/*
 * This file is part of Infinitest.
 *
 * Copyright (C) 2010
 * "Ben Rady" <benrady@gmail.com>,
 * "Rod Coffin" <rfciii@gmail.com>,
 * "Ryan Breidenbach" <ryan.breidenbach@gmail.com>, et al.
 *
 * Infinitest is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Infinitest is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Infinitest.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.infinitest;

import static com.google.common.collect.Lists.*;
import static com.google.common.collect.Maps.*;
import static java.io.File.*;
import static java.util.logging.Level.*;
import static org.infinitest.util.InfinitestUtils.*;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.infinitest.testrunner.TestRunnerProcess;

/**
 * Defines the runtime environment for test execution.
 * 
 * @author bjrady
 */
public class RuntimeEnvironment implements ClasspathProvider
{
    private final int heapSize = 256;
    private final File javaHome;
    private final File workingDirectory;
    private final List<File> classOutputDirs;
    private final String rawClasspath;
    private final List<String> additionalArgs;
    private String infinitestRuntimeClasspath;
    private List<File> classDirs;
    private final CustomJvmArgumentsReader customArgumentsReader;

    /**
     * Creates a new environment for test execution.
     * 
     * @param classOutputDirs
     *            A list of class directories containing classes generated by an IDE or compiler
     * @param workingDirectory
     *            The "Current Directory" used to resolve relative paths when running tests
     * @param classpath
     *            The classpath used to launch the testrunner process (must include directories in
     *            classOutputDirs)
     * @param javaHome
     *            The location of the JDK home directory, similar to the JAVA_HOME environment
     *            variable.
     */
    public RuntimeEnvironment(List<File> classOutputDirs, File workingDirectory, String classpath, File javaHome)
    {
        this.classOutputDirs = classOutputDirs;
        this.workingDirectory = workingDirectory;
        this.rawClasspath = classpath;
        this.javaHome = javaHome;
        this.infinitestRuntimeClasspath = classpath;
        this.additionalArgs = newArrayList();
        this.customArgumentsReader = new FileCustomJvmArgumentReader(workingDirectory);
    }

    public List<String> createProcessArguments()
    {
        String memorySetting = "-mx" + getHeapSize() + "m";
        List<String> args = newArrayList(getJavaExecutable(), memorySetting);
        args.addAll(additionalArgs);
        args.addAll(addCustomArguments());
        return args;
    }

    public Map<String, String> createProcessEnvironment()
    {
        Map<String, String> environment = newHashMap();
        environment.put("CLASSPATH", getCompleteClasspath());
        return environment;
    }

    private List<String> addCustomArguments()
    {
        return customArgumentsReader.readCustomArguments();
    }

    /**
     * The classpath that is used to launch Infinitest, not the classpath of the project that you're
     * trying to test
     */
    public void setInfinitestRuntimeClassPath(String infinitestRuntimeClassPath)
    {
        this.infinitestRuntimeClasspath = infinitestRuntimeClassPath;
    }

    public String getCompleteClasspath()
    {
        String completeClasspath = getRawClasspath();
        String infinitestJarPath = findClasspathEntryFor(infinitestRuntimeClasspath, TestRunnerProcess.class);
        log(CONFIG, "Found infinitest jar classpath entry at " + infinitestJarPath);
        if (infinitestJarPath != null)
        {
            completeClasspath = infinitestJarPath + File.pathSeparator + completeClasspath;
        }
        else
        {
            log(SEVERE, "Could not find a classpath entry for Infinitest Core in " + infinitestRuntimeClasspath);
        }
        validateClasspath(completeClasspath);
        return completeClasspath;
    }

    private void validateClasspath(String completeClasspath)
    {
        for (String entry : getClasspathElements(completeClasspath))
        {
            if (!(new File(getWorkingDirectory(), entry).exists() || new File(entry).exists()))
            {
                log(WARNING, "Could not find classpath entry [" + entry + "] at file system root or relative to "
                                + "working directory [" + getWorkingDirectory() + "].");
            }
        }
    }

    private List<String> getClasspathElements(String classpath)
    {
        return newArrayList(classpath.split(pathSeparator));
    }

    private String getJavaExecutable()
    {
        File javaExecutable = createJavaExecutableFile("java");
        if (!javaExecutable.exists())
        {
            javaExecutable = createJavaExecutableFile("java.exe");
            if (!javaExecutable.exists())
            {
                throw new JavaHomeException(javaExecutable);
            }
        }
        return javaExecutable.getAbsolutePath();
    }

    private File createJavaExecutableFile(String fileName)
    {
        File javaExecutable = new File(javaHome.getAbsolutePath() + separator + "bin" + separator + fileName);
        return javaExecutable;
    }

    /**
     * The heap size, in megabytes, that will be used when launching the test runner process.
     */
    public int getHeapSize()
    {
        return heapSize;
    }

    /**
     * The working directory that will be used when launching the test runner process. That is, if a
     * test run by the core creates a new File object like: <code>
     * new File(".");
     * </code> It will be equal to this directory
     */
    public File getWorkingDirectory()
    {
        return workingDirectory;
    }

    public List<File> getClassOutputDirs()
    {
        return classOutputDirs;
    }

    private String getRawClasspath()
    {
        return rawClasspath;
    }

    public void addVMArgs(List<String> newArgs)
    {
        additionalArgs.addAll(newArgs);
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj instanceof RuntimeEnvironment)
        {
            RuntimeEnvironment other = (RuntimeEnvironment) obj;
            return other.classOutputDirs.equals(classOutputDirs) && other.workingDirectory.equals(workingDirectory)
                            && other.rawClasspath.equals(rawClasspath) && other.javaHome.equals(javaHome)
                            && other.additionalArgs.equals(additionalArgs);
        }
        return false;
    }

    @Override
    public int hashCode()
    {
        // CHECKSTYLE:OFF
        return classOutputDirs.hashCode() ^ additionalArgs.hashCode() ^ javaHome.hashCode()
                        ^ workingDirectory.hashCode() ^ rawClasspath.hashCode();
        // CHECKSTYLE:ON
    }

    public List<File> classDirectoriesInClasspath()
    {
        // RISK Caching this prevents tons of disk access, but we risk caching a bad set of
        // classDirs
        if (classDirs == null)
        {
            classDirs = newArrayList();
            for (String each : getClasspathElements(rawClasspath))
            {
                File classEntry = new File(each);
                if (classEntry.isDirectory())
                {
                    classDirs.add(classEntry);
                }
            }
        }
        return classDirs;
    }
}
